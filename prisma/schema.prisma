// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lang {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ads {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BaseCategory {
  id        String   @id @default(uuid())
  nameTm    String
  nameRu    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([nameTm, nameRu])
}

enum Sections {
  Local
  World
  Video
}

model SportCategories {
  id        String   @id @default(uuid())
  nameTm    String
  nameRu    String
  section   Sections
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  news   News[]
  videos Videos[]

  @@unique([nameTm, nameRu, section])
}

model News {
  id         String          @id @default(uuid())
  textTm     String
  textRu     String
  views      Int             @default(0)
  nameTm     String
  nameRu     String
  location   String
  imagePath  String
  category   SportCategories @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@unique([nameTm, nameRu])
}

model Videos {
  id         String          @id @default(uuid())
  views      Int             @default(0)
  nameTm     String
  nameRu     String
  videoPath  String
  imagePath  String
  category   SportCategories @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@unique([nameTm, nameRu])
}

model Federations {
  id        String              @id @default(uuid())
  nameTm    String
  nameRu    String
  fsports   FederationSports?
  fathlete  FederationAthlete?
  ftrainers FederationTrainers?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([nameTm, nameRu])
}

model FederationSports {
  id           String      @id @default(uuid())
  tel          String
  fax          String
  web          String
  email        String
  leader       String
  founded      String
  location     String
  president    String
  federationId String      @unique
  federation   Federations @relation(fields: [federationId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([tel, email])
}

model FederationTrainers {
  id           String      @id @default(uuid())
  age          Int
  job          String
  name         String      @unique
  made         String
  rating       Float
  imagePath    String
  experience   Int
  birthPlace   String
  sportLevel   String
  federationId String      @unique
  federation   Federations @relation(fields: [federationId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model FederationAthlete {
  id           String      @id @default(uuid())
  name         String      @unique
  club         String
  made         String
  rating       Float
  position     String
  imagePath    String
  federationId String      @unique
  federation   Federations @relation(fields: [federationId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
