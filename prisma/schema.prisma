// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lang {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  Developer
  Admin
  Employee
  User
}

model Users {
  id              String            @id @default(uuid())
  name            String
  surname         String
  email           String            @unique
  password        String
  roles           Role[]            @default([User])
  employeeRatings EmployeeRatings[]
  athleteRatings  AthleteRatings[]
  trainerRatings  TrainerRatings[]
}

model Ads {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BaseCategory {
  id        String   @id @default(uuid())
  nameTm    String
  nameRu    String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([nameTm, nameRu])
}

enum Sections {
  Local
  World
  Video
}

model SportCategories {
  id        String   @id @default(uuid())
  nameTm    String
  nameRu    String
  section   Sections
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  news   News[]
  videos Videos[]

  @@unique([nameTm, nameRu, section])
}

model News {
  id         String          @id @default(uuid())
  textTm     String
  textRu     String
  views      Int             @default(0)
  nameTm     String
  nameRu     String
  locationTm String
  locationRu String
  imagePath  String
  category   SportCategories @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@unique([nameTm, nameRu])
}

model Videos {
  id         String          @id @default(uuid())
  views      Int             @default(0)
  nameTm     String
  nameRu     String
  textTm     String
  textRu     String
  videoPath  String
  imagePath  String
  category   SportCategories @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@unique([nameTm, nameRu])
}

model SportTypes {
  id        String   @id @default(uuid())
  nameTm    String
  nameRu    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([nameTm, nameRu])
}

model Federations {
  id        String               @id @default(uuid())
  nameTm    String
  nameRu    String
  imagePath String
  fsports   FederationSports?
  fathlete  FederationAthlete[]
  ftrainers FederationTrainers[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@unique([nameTm, nameRu])
}

model FederationSports {
  id           String      @id @default(uuid())
  tel          String
  fax          String
  web          String
  email        String
  leaderTm     String
  leaderRu     String
  founded      Int
  locationTm   String
  locationRu   String
  presidentTm  String
  presidentRu  String
  federationId String      @unique
  federation   Federations @relation(fields: [federationId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([tel, email])
}

model FederationTrainers {
  id             String           @id @default(uuid())
  rating         Float            @default(4.5)
  experience     Int              @default(0)
  views          Int              @default(0)
  birthday       DateTime?
  jobTm          String
  jobRu          String
  nameTm         String
  nameRu         String
  madeTm         String
  madeRu         String
  birthPlaceTm   String
  birthPlaceRu   String
  sportLevelTm   String
  sportLevelRu   String
  workedAtTm     String[]
  workedAtRu     String[]
  badgesTm       String[]
  badgesRu       String[]
  imagePath      String
  links          Json             @default("{}") @db.Json
  federationId   String
  federation     Federations      @relation(fields: [federationId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  trainerRatings TrainerRatings[]

  @@unique([nameTm, nameRu])
}

model TrainerRatings {
  id        String             @id @default(uuid())
  user      Users              @relation(fields: [userId], references: [id])
  userId    String
  trainer   FederationTrainers @relation(fields: [trainerId], references: [id])
  trainerId String
  rating    Int                @db.SmallInt
  comment   String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model FederationAthlete {
  id             String           @id @default(uuid())
  jobTm          String
  jobRu          String
  birthday       DateTime?
  nameTm         String
  nameRu         String
  madeTm         String
  madeRu         String
  imagePath      String
  club           String // *
  positionTm     String // *
  positionRu     String // *
  rating         Float            @default(4.5)
  views          Int              @default(0)
  experience     Int              @default(0)
  links          Json             @default("{}") @db.Json
  birthPlaceTm   String
  birthPlaceRu   String
  sportLevelTm   String
  sportLevelRu   String
  workedAtTm     String[]
  workedAtRu     String[]
  badgesTm       String[]
  badgesRu       String[]
  federationId   String
  federation     Federations      @relation(fields: [federationId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  athleteRatings AthleteRatings[]

  @@unique([nameTm, nameRu])
}

model AthleteRatings {
  id        String            @id @default(uuid())
  user      Users             @relation(fields: [userId], references: [id])
  userId    String
  athlete   FederationAthlete @relation(fields: [athleteId], references: [id])
  athleteId String
  rating    Int               @db.SmallInt
  comment   String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model SportEnvironment {
  id           String                   @id @default(uuid())
  nameTm       String
  nameRu       String
  gymsandclubs FederationGymsAndClubs[]
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt

  @@unique([nameTm, nameRu])
}
// @default("014efeac-428e-4eb7-b2fe-e022b381127b")npxx
model FederationGymsAndClubs {
  id            String            @id @default(uuid())
  nameTm        String
  nameRu        String
  venue         Venues?            @relation(fields: [venueId], references: [id])
  venueId       String?
  locationTm    String
  locationRu    String
  email         String
  link          String
  latitude      Float
  longitude     Float
  tel           String[]
  sportsTm      String[]
  sportsRu      String[]
  openAtTm      String[]
  openAtRu      String[]
  imagePath1    String
  imagePath2    String
  imagePath3    String
  imagePath4    String
  imagePath5    String
  views         Int               @default(0)
  environment   SportEnvironment? @relation(fields: [environmentId], references: [id])
  environmentId String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@unique([nameTm, nameRu, environmentId])
}

model HealthCareDepartments {
  id        String                          @id @default(uuid())
  nameTm    String
  nameRu    String
  employees FederationHealthCareEmployees[]
  createdAt DateTime                        @default(now())
  updatedAt DateTime                        @updatedAt

  @@unique([nameTm, nameRu])
}

model FederationHealthCareEmployees {
  id              String                @id @default(uuid())
  nameTm          String
  nameRu          String
  jobTm           String
  jobRu           String
  birthday        DateTime?
  workAtTm        String
  workAtRu        String
  experience      Int                   @default(0)
  views           Int                   @default(0)
  rating          Float                 @default(4.5)
  links           Json                  @default("{}") @db.Json
  imagePath       String
  departmentId    String
  department      HealthCareDepartments @relation(fields: [departmentId], references: [id])
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  employeeRatings EmployeeRatings[]

  @@unique([nameTm, nameRu])
}

model EmployeeRatings {
  id         String                        @id @default(uuid())
  user       Users                         @relation(fields: [userId], references: [id])
  userId     String
  employee   FederationHealthCareEmployees @relation(fields: [employeeId], references: [id])
  employeeId String
  rating     Int                           @db.SmallInt
  comment    String
  createdAt  DateTime                      @default(now())
  updatedAt  DateTime                      @updatedAt
}

model CompetitionTypes {
  id          Int            @id @default(autoincrement())
  nameTm      String
  nameRu      String
  competition Competitions[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@unique([nameRu, nameTm])
}

model Venues {
  id                     String                   @id @default(uuid())
  nameTm                 String
  nameRu                 String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  Competitions           Competitions[]
  GymsAndClubs FederationGymsAndClubs[]

  @@unique([nameTm, nameRu])
}

model Competitions {
  id              String           @id @default(uuid())
  nameTm          String
  nameRu          String
  textTm          String
  textRu          String
  venue           Venues           @relation(fields: [venueId], references: [id])
  venueId         String
  locationTm      String
  locationRu      String
  startDate       DateTime
  endDate         DateTime
  views           Int              @default(0)
  imagePath       String
  competitionType CompetitionTypes @relation(fields: [typeId], references: [id])
  typeId          Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([nameTm, nameRu])
}

enum Statistics {
  Football
  Volleyball
}

model Championships {
  id        String      @id @default(uuid())
  nameTm    String
  nameRu    String
  imagePath String?
  type      Statistics?
  team      Teams[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([nameTm, nameRu, type])
}

model Teams {
  id             String        @id @default(uuid())
  nameTm         String
  nameRu         String
  imagePath      String?
  played         Int           @default(1) @db.SmallInt
  win            Int           @db.SmallInt
  draw           Int           @db.SmallInt
  loss           Int           @db.SmallInt
  goalsScored    Int           @db.SmallInt
  goalsAgainst   Int           @db.SmallInt
  points         Int           @db.SmallInt
  chamionship    Championships @relation(fields: [championshipId], references: [id])
  championshipId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([nameTm, nameRu, championshipId])
}
